library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
ADNI_merged$analysis_data %>% filter(COLPROT == "ADNI3")
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3")
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3")
ADNI_table
MMSCORE
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3")
ADNI_table
ADNI_merged$analysis_data$MMSCORE
review_complete(ADNI_merged, check_cols = c("MMSCORE","GENOTYPE","DIAGNOSIS","ST29SV","ST88SV"))
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3")
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
# ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
# ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
# Load necessary library
library(dplyr)
# Create the first data frame (df1)
df1 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(NA, 20, 30, NA),
Value2 = c(100, NA, 300, 400),
stringsAsFactors = FALSE
)
# Create the second data frame (df2)
df2 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(10, 25, NA, 40),
Value2 = c(NA, 250, 350, 450),
stringsAsFactors = FALSE
)
# View the data frames
print("df1:")
print(df1)
print("df2:")
print(df2)
# Perform a left join on 'ID'
df_joined <- df1 %>%
left_join(df2, by = "ID", suffix = c("", ".df2"))
# View the joined data frame
print("Joined Data Frame:")
print(df_joined)
# Use coalesce to replace NA values in df1 columns with values from df2
df_joined <- df_joined %>%
mutate(
Value1 = coalesce(Value1, Value1.df2),
Value2 = coalesce(Value2, Value2.df2)
) %>%
# Remove the .df2 columns
select(-Value1.df2, -Value2.df2)
# View the final data frame
print("Final Data Frame after coalesce:")
print(df_joined)
# Load necessary library
library(dplyr)
# Create the first data frame (df1)
df1 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(NA, 20, 30, NA),
Value2 = c(100, NA, 300, 400),
stringsAsFactors = FALSE
)
# Create the second data frame (df2)
df2 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(10, 25, NA, 40),
Value2 = c(NA, 250, 350, 450),
stringsAsFactors = FALSE
)
# View the data frames
print("df1:")
print(df1)
print("df2:")
print(df2)
# Perform a left join on 'ID'
df_joined <- df1 %>%
left_join(df2, by = "ID", suffix = c("", ".df2"))
# View the joined data frame
print("Joined Data Frame:")
print(df_joined)
# Use mutate(across(everything(), ...)) to coalesce columns
df_joined <- df_joined %>%
mutate(across(everything(), ~ {
dup_col <- paste0(cur_column(), ".df2")
if (dup_col %in% names(.)) {
coalesce(.x, .[[dup_col]])
} else {
.x
}
})) %>%
select(-ends_with(".df2"))
# View the final data frame
print("Final Data Frame after coalesce:")
print(df_joined)
# Load necessary library
library(dplyr)
# Create the first data frame (df1)
df1 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(NA, 20, 30, NA),
Value2 = c(100, NA, 300, 400),
stringsAsFactors = FALSE
)
# Create the second data frame (df2)
df2 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(10, 25, NA, 40),
Value2 = c(NA, 250, 350, 450),
stringsAsFactors = FALSE
)
# Perform a left join on 'ID'
df_joined <- df1 %>%
left_join(df2, by = "ID", suffix = c("", ".df2"))
# Identify duplicate columns
dup_columns <- names(df_joined)[grepl("\\.df2$", names(df_joined))]
orig_columns <- sub("\\.df2$", "", dup_columns)
# Replace NA values in original columns with values from the duplicate columns
for (col in orig_columns) {
dup_col <- paste0(col, ".df2")
df_joined[[col]] <- coalesce(df_joined[[col]], df_joined[[dup_col]])
}
# Remove the duplicate columns
df_joined <- df_joined %>% select(-ends_with(".df2"))
# View the final data frame
print("Final Data Frame after coalesce:")
print(df_joined)
# Load necessary library
library(dplyr)
# Create the first data frame (df1)
df1 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(NA, 20, 30, NA),
Value2 = c(100, NA, 300, 400),
stringsAsFactors = FALSE
)
print(df1)
# Create the second data frame (df2)
df2 <- data.frame(
ID = c(1, 2, 3, 4),
Value1 = c(10, 25, NA, 40),
Value2 = c(NA, 250, 350, 450),
stringsAsFactors = FALSE
)
print(df2)
# Perform a left join on 'ID'
df_joined <- df1 %>%
left_join(df2, by = "ID", suffix = c("", ".df2"))
print(df_joined)
# Identify duplicate columns
dup_columns <- names(df_joined)[grepl("\\.df2$", names(df_joined))]
orig_columns <- sub("\\.df2$", "", dup_columns)
# Replace NA values in original columns with values from the duplicate columns
for (col in orig_columns) {
dup_col <- paste0(col, ".df2")
df_joined[[col]] <- coalesce(df_joined[[col]], df_joined[[dup_col]])
}
# Remove the duplicate columns
df_joined <- df_joined %>% select(-ends_with(".df2"))
# View the final data frame
print("Final Data Frame after coalesce:")
print(df_joined)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
ADNI_merged$hold_data
ADNI_merged$hold_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV.dup))
ADNI_merged$hold_data %>% select(ST88SV)
ADNI_merged$hold_data %>% select(ST88SV.dup)
ADNI_merged$hold_data %>% filter(!is.na(ST88SV.dup))
ADNI_merged$hold_data %>% distinct(ST88SV)
ADNI_merged$hold_data %>% distinct(ST88SV.dup)
ADNI_merged$hold_data %>% distinct(ST88SV.dup.dup)
ADNI_merged$hold_data$ST88SV.dup
UCSF_1
UCSFFSX51_ADNI_1_GO_2$ST88SV
UCSFFSX6_ADNI_3$ST88SV
ADNI_merged$hold_data %>% distinct(ST153SV.dup)
ADNI_merged$hold_data %>% distinct(ST153SV.dup)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
# ADNI_merged$hold_data %>% distinct(ST153SV.dup)
#
# UCSFFSX51_ADNI_1_GO_2$ST88SV
#
# ADNI_merged$hold_data$ST153SV.dup
ADNI_merged$hold_data_add
ADNI_merged$hold_data
ADNI_merged$hold_data %>% filter(!is.n(ST88SV))
ADNI_merged$hold_data %>% filter(!is.na(ST88SV))
ADNI_merged$hold_data %>% filter(!is.na(ST88SV)) %>% filter(PHASE == "ADNI3")
ADNI_merged$hold_data
ADNI_merged$hold_data_add
ADNI_merged$hold_data_add$ST104TA
ADNI_merged$hold_data_add$ST88SV
ADNI_merged$hold_data_add
UCSFFSX6_ADNI_3
ADNI_merged$hold_data_add
UCSFFSX6_ADNI_3
UCSFFSX6_ADNI_3 %>% filter(RID == 1016)
ADNI_merged$hold_data_add
UCSFFSX6_ADNI_3 %>% filter(RID == 1016)
ADNI_merged$hold_data_add
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
complete_output = review_complete(Biocard_merged,check_cols = c("LogMem1_B","LogMem2_B","DIAGNOSIS","DOB","RACE","AB40","AB42"))
Biocard_merged$analysis_data
complete_output$complete_df
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
# ADNI_merged$hold_data %>% distinct(ST153SV.dup)
#
# UCSFFSX51_ADNI_1_GO_2$ST88SV
#
# ADNI_merged$hold_data$ST153SV.dup
# ADNI_merged$hold_data
#
# ADNI_merged$hold_data_add
#
# UCSFFSX6_ADNI_3 %>% filter(RID == 1016)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
library(devtools)
install_github("Shijia1997/ADMerge",force = TRUE)
library(ADMerge)
# library(dplyr)
library(knitr)
# library(readxl)
library(kableExtra)
BIOCARD_table =get_src_table(path = "BIOCARD Demonstration",
ID_usr_list = c("SUBJECT_ID"),
DATE_usr_list = c("VISITDATE","DIAGDATE","date"),
IS_overlap_list = c("FALSE"),
WINDOW_list = c(366))
plot_files(path = "BIOCARD Demonstration", dict_src = BIOCARD_table, study_type = "BIOCARD",date_type = "Date")
Biocard_merged = ad_merge(path = "BIOCARD Demonstration",DATE_type = "Date",timeline_file = "BIOCARD_DiagnosisData_2021.11.01",dict_src = BIOCARD_table)
complete_output = review_complete(Biocard_merged,check_cols = c("LogMem1_B","LogMem2_B","DIAGNOSIS","DOB","RACE","AB40","AB42"))
complete_output$complete_df
Biocard_merged$analysis_data
library(dplyr)
ADNI_table = get_src_table(path = "ADNI Demonstration",
ID_usr_list = c("RID"),
DATE_usr_list = c("VISDATE","EXAMDATE","VISDATE","EXAMDATE","EXAMDATE"),
non_longitudinal_list = c("APOERES_ADNI_1_2_3"),
IS_overlap_list = c("FALSE","FALSE","FALSE","TRUE","FALSE","FALSE"),
WINDOW_list = c(366))
plot_files(path = "ADNI Demonstration", dict_src = ADNI_table, study_type = "ADNI",date_type = "Date")
ADNI_merged = ad_merge(path = "ADNI_Demonstration",
DATE_type = "Date",
timeline_file = "DXSUM",
dict_src = ADNI_table)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
# ADNI_merged$hold_data %>% distinct(ST153SV.dup)
#
# UCSFFSX51_ADNI_1_GO_2$ST88SV
#
# ADNI_merged$hold_data$ST153SV.dup
# ADNI_merged$hold_data
#
# ADNI_merged$hold_data_add
#
# UCSFFSX6_ADNI_3 %>% filter(RID == 1016)
UCSFFSX6_ADNI_3 %>% filter(RID == 21)
#
ADNI_merged$analysis_data %>% filter(PHASE == "ADNI3") %>% filter(!is.na(ST88SV))
UCSFFSX6_ADNI_3 %>% filter(RID == 21)
