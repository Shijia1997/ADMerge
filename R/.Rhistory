k
k %>% filter(RID == 2)
k = ad_data$analysis_data
k %>% filter(RID == 2)
k = ad_data$add
k
ad_merge = function(path,
DATE_type = c("Date", "Number"),
...,
dict_src = NULL,
dict_src_path = NULL,
timeline_file = NULL,
timeline_path = NULL,
FILE_pattern = ".xlsx|.xls|.csv",
ID_pattern = "ID",
DATE_pattern = "DATE|VISITNO",
IS_overlap_list = NULL,
WINDOW_list = NULL,
ID_usr_list = NULL,
DATE_usr_list = NULL) {
files_list = list.files(path, pattern = FILE_pattern)
for (file_name in files_list) {
dat = suppressWarnings(read_by_type(file_name, path))
f_name = gsub(FILE_pattern, "", file_name) # file name
assign(f_name, dat, envir = .GlobalEnv)
}
cat("Finished loading data. \n")
# Get summary of source data
if (is.null(dict_src)) {
if (is.null(dict_src_path)) {
dict_src = get_src_table(path,
FILE_pattern,
ID_pattern,
DATE_pattern,
IS_overlap_list,
WINDOW_list,
ID_usr_list,
DATE_usr_list)
}
else {
dict_src = read.csv(dict_src_path, header = T)
}
}
cat("dict_src generated. \n")
# Generate key ID data
key_ID = get_key_IDs(dict_src)
# Select DATE data (there are two types of DATE, strings like visit number or actual date)
if (!is.null(timeline_path)) {
key_DATE = read.csv(timeline_path, header = T)
}
else {
if (is.null(timeline_file)) {
timeline_list = dict_src %>%
filter(!is.na(DATE_for_merge))
timeline_file = timeline_list$file[1]
}
key_DATE = get_key_DATEs(dict_src,
timeline_file,
DATE_type)
}
cat("Keys generated. \n")
# Merge
ID_DATE = dict_src$ID_for_merge[grep(timeline_file, dict_src$file)]
name_DATE = dict_src$DATE_for_merge[grep(timeline_file, dict_src$file)]
dat_list = dict_src$file
if (DATE_type == "Date") {
dat_all = key_ID %>%
left_join(key_DATE,
by = ID_DATE,
multiple = "all",
suffix = c("", ".dup")) %>%
select(-ends_with(".dup")) %>%
filter(!is.na(!!as.name(name_DATE)))
base_names = names(dat_all)
for (dat in dat_list) {
idx = grep(dat, dict_src$file)
ID = dict_src$ID_for_merge[idx]
DATE = dict_src$DATE_for_merge[idx]
OVLP = dict_src$IS_overlap[idx]
WIN = dict_src$WINDOW[idx]
if (is.na(DATE)) { # demo
dat_tem = eval(as.name(dat)) %>%
mutate(!!as.name(ID) := as.character(!!as.name(ID)))
dat_all = dat_all %>%
left_join(dat_tem,
by = ID,
suffix = c("", ".dup"),
multiple = "all") %>%
select(-ends_with(".dup")) %>%
distinct()
}
else { # longitudinal
dat_tem = eval(as.name(dat)) %>%
mutate(!!as.name(ID) := as.character(!!as.name(ID)),
across(any_of(DATE), as.Date))
if (DATE != name_DATE){dat_add = dat_all %>%
group_by(!!as.name(ID)) %>%
mutate(tem_date_left = get_window_bound(!!as.name(name_DATE),
date_left,
is_left = 1,
ovlp = OVLP,
window_len = WIN),
tem_date_right = get_window_bound(!!as.name(name_DATE),
date_right,
is_left = -1,
ovlp = OVLP,
window_len = WIN))%>%
left_join(dat_tem,
by = c(ID),
suffix = c("", ".dup"),
multiple = "all")  %>%
select(-ends_with(".dup")) %>%
distinct() %>%
filter(!!as.name(DATE) >= tem_date_left &
!!as.name(DATE) < tem_date_right) %>%
mutate(diff = abs(!!as.name(DATE) - !!as.name(name_DATE))) %>%
group_by(!!as.name(ID), !!as.name(name_DATE)) %>%
arrange(diff, .by_group = T) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(-c("diff", "tem_date_left", "tem_date_right"))
} else if (DATE == name_DATE){dat_add = dat_all %>%
group_by(!!as.name(ID)) %>%
mutate(tem_date_left = get_window_bound(!!as.name(name_DATE),
date_left,
is_left = 1,
ovlp = OVLP,
window_len = WIN),
tem_date_right = get_window_bound(!!as.name(name_DATE),
date_right,
is_left = -1,
ovlp = OVLP,
window_len = WIN))%>%
left_join(dat_tem,
by = c(ID),
suffix = c("", ".dup"),
multiple = "all")  %>%
distinct() %>%
filter(!!as.name(DATE) >= tem_date_left &
!!as.name(DATE) < tem_date_right) %>%
mutate(diff = abs(!!as.name(DATE) - !!as.name(paste0(DATE,".dup")))) %>%
group_by(!!as.name(ID), !!as.name(name_DATE)) %>%
arrange(diff, .by_group = T) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(-c("diff", "tem_date_left", "tem_date_right")) %>%
select(-ends_with(".dup"))
}
}
dat_all = dat_all %>%
left_join(dat_add,
by = base_names,
suffix = c("", ".dup")) %>%
select(-ends_with(".dup")) %>%
distinct()
}
dat_all = dat_all %>%
select(-c("date_left", "date_right"))
}
else if (DATE_type == "Number") {
dat_all = key_ID %>%
left_join(key_DATE,
by = ID_DATE,
multiple = "all",
suffix = c("", ".dup")) %>%
select(-ends_with(".dup")) %>%
mutate(!!as.name("Date") := as.character(!!as.name(name_DATE))) %>%
select(-!!as.name(name_DATE)) %>%
na.omit()
for (dat in dat_list) {
idx = grep(dat, dict_src$file)
ID = dict_src$ID_for_merge[idx]
DATE = dict_src$DATE_for_merge[idx]
if (is.na(DATE)) { # demo
dat_tem = eval(as.name(dat)) %>%
mutate(!!as.name(ID) := as.character(!!as.name(ID)))
dat_all = dat_all %>%
left_join(dat_tem,
by = ID,
suffix = c("", ".dup"),
multiple = "all") %>%
select(-ends_with(".dup")) %>%
distinct()
}
else { # longitudinal
dat_tem = eval(as.name(dat)) %>%
mutate(!!as.name(ID) := as.character(!!as.name(ID)),
!!as.name("Date") := as.character(!!as.name(DATE))) %>%
select(-!!as.name(DATE))
dat_all = dat_all %>%
left_join(dat_tem,
by = c(ID, "Date"),
suffix = c("", ".dup"),
multiple = "all") %>%
select(-ends_with(".dup")) %>%
distinct()
}
}
}
else {
stop("Readed 'DATE_type' must be either 'Date' or 'Number'.")
}
cat("Merge done! \n")
out_res = list(analysis_data = dat_all,
dict_src = dict_src,
add = dat_add)
class(out_res) = "ADMerge_res"
return(out_res)
}
src_table
data
data = ad_data$add
data
data %>% group_by(RID) %>% mutate(tem_date_left = get_window_bound(VISDATE,
date_left,
is_left = 1,
ovlp = FALSE,
window_len = 366),
tem_date_right = get_window_bound(VISDATE,
date_right,
is_left = -1,
ovlp = FALSE,
window_len = 366))
src_table = get_src_table(path ="sample_data",ID_pattern = "ID",ID_usr_list = c("RID"),DATE_usr_list = c("update_stamp"))
src_table
ad_data = ad_merge("sample_data", DATE_type = "Number",dict_src = src_table)
ad_data = ad_merge("sample_data", DATE_type = "Date",dict_src = src_table)
return(key_DATE)
return(key_DATE)}
get_key_DATEs = function(dict_src,
timeline_file,
DATE_type = c("Date", "Number")) {
name_ID = na.omit(unique(unlist(strsplit(dict_src$ID_for_merge, ", "))))
name_DATE = dict_src$DATE_for_merge[grep(timeline_file, dict_src$file)]
if (DATE_type == "Date") {
key_DATE = eval(as.name(timeline_file)) %>%
select(any_of(c(name_ID, name_DATE))) %>%
mutate(across(any_of(name_ID), as.character),
across(any_of(name_DATE), as.Date)) %>%
na.omit() %>%
group_by(across(any_of(name_ID))) %>%
arrange(name_DATE, .by_group = T) %>%
mutate(date_left  = (!!as.name(name_DATE) - lag(!!as.name(name_DATE))) / 2,
date_right = lead(date_left))
}
else if (DATE_type == "Number") {
key_DATE = eval(as.name(timeline_file)) %>%
select(any_of(c(name_ID, name_DATE))) %>%
mutate(across(everything(), as.character)) %>%
na.omit()
}
else {
stop("Readed 'DATE_type' must be either 'Date' or 'Number'.")
}
return(key_DATE)
}
src_table
get_key_DATEs(src_table,
"MOCA_15Feb2024",
"Number")
get_key_DATEs(src_table,
"MOCA_15Feb2024",
"Date")
get_key_DATEs(src_table,
"MOCA_15Feb2024",
"Number")
library(tibble)
# Create a data frame with unique ID and date as number for longitudinal data
df <- tibble(
ID = 1:10, # 10 unique IDs
Day_Number = c(1, 3, 5, 7, 1, 3, 5, 7, 1, 3) # Day numbers, creating a pattern
)
# Display the dataframe
print(df)
src_table
src_table = get_src_table(path ="sample_data",ID_pattern = "ID",ID_usr_list = c("RID"),DATE_usr_list = c("VISDATE"))
src_table
data %>% mutate(tem_date_left = get_window_bound(VISDATE,
date_left,
is_left = 1,
ovlp = FALSE,
window_len = 366),
tem_date_right = get_window_bound(VISDATE,
date_right,
is_left = -1,
ovlp = FALSE,
window_len = 366))
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"),DATE_usr_list = c("date"))
biocard_path = "sample_data"
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"),DATE_usr_list = c("date"))
src_table
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
src_table
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"),DATE_usr_list = c("date"),ID_usr_list = c("RID"))
src_table
src_table
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"),DATE_usr_list = c("date"),ID_usr_list = c("RID"))
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("RID"),DATE_usr_list = c("date"))
src_table
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date"))
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date")
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data
ad_data$analysis_data
#
src_table
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("SUBJECT_ID"))
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
##########
data = get_key_DATEs(src_table,DATE_type = "Date")
##########
data = get_key_DATEs(src_table,timeline_file = "BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed",DATE_type = "Date")
data
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
##########
data = get_key_DATEs(src_table,timeline_file = "BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed",DATE_type = "Date")
data
data = get_key_IDs(src_table)
data
##########
data = get_key_DATEs(src_table,timeline_file = "BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed",DATE_type = "Date")
##########
data = get_key_DATEs(src_table,timeline_file = "BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed",DATE_type = "Date")
data
distinct(data$study_id)
nunique(data$study_id)
data
data %>% select(study_id) %>% distinct()
data
data = get_key_IDs(src_table)
data
data %>% filter(!is.na(study_id))
`BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed`
`BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed` %>% distinct(study_id)
data = get_key_IDs(src_table)
data
df <- data.frame(
study_id = c("121", "27", "46", NA, NA),
SUBJECT_ID = c(NA, NA, NA, "A", "B"),
another_column = c(NA, NA, NA, NA, "C")
)
# Function to find the first non-NA value in a row
first_non_na <- function(row) {
non_na_values <- row[!is.na(row)]
if (length(non_na_values) > 0) {
return(non_na_values[1])
} else {
return(NA)
}
}
# Apply the function to each row and create a new column
df$merged_column <- apply(df, 1, first_non_na)
print(df)
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "sample_data"
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("RID"),DATE_usr_list = c("date"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
src_table
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "sample_data"
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("RID"),DATE_usr_list = c("date"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
##########
data = get_key_DATEs(src_table,timeline_file = "BIOCARD CSF_Lumipulse Data with dates_081320_pre1995Removed",DATE_type = "Date")
data
data = get_key_IDs(src_table)
data
df_left <- data.frame(
left_key = c(1, 2, 3),
name = c("Alice", "Bob", "Charlie")
)
df_right <- data.frame(
right_key = c(2, 3, 4),
age = c(25, 30, 35)
)
# Perform a left join using the left_key column in df_left and the right_key column in df_right
result <- left_join(df_left, df_right, by = c("left_key" = "right_key"))
print(result)
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
library(dplyr)
library(readxl)
library(tidyverse)
source("adm_main.R")
source("adm_helper.R")
biocard_path = "BIOCARD August 2021 internal"
src_table = get_src_table(path = biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("study_id","SUBJECT_ID"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
BIOCARD_CognitiveData_2021.11.02
BIOCARD_CognitiveData_2021.11.02 %>% filter(SUBJECT_ID == 121)
biocard_path = "sample_data"
src_table = get_src_table(path =biocard_path,ID_pattern = "ID",DATE_pattern = "Date",ID_usr_list = c("RID"),DATE_usr_list = c("date"))
ad_data = ad_merge(biocard_path, DATE_type = "Date",dict_src = src_table)
ad_data$analysis_data
